REM /**
REM  * Charts.bbj
REM  * @author len
REM  *
REM  */

rem  temporary use
if pos("TEMP/ " = pfx) = 0 then prefix "TEMP/ " + pfx

use ::DTChart.bbj::DTChart
use ::DTFileRecords.bbj::DTFileRecords
use java.util.TreeMap

class public Charts
  field private BBjString gr04$
  field private BBjString msg$
  field private TreeMap   years!  = new TreeMap()
  field private TreeMap   recent! = new TreeMap()
  field private BBjString gr05Template$

  method public Charts(BBjString league$, BBjString id$)
    call "SW001", "XXGR04", 0, league$ + id$, gr04$, sw001$
    if sw001.onfile then
      #gr04$ = gr04$
      #getScores()
    else
      #msg$ = "Golfer not on file"
    fi
  methodend
  
  method public Charts(BBjString gr04$)
    #gr04$ = gr04$
    #getScores()
  methodend
  
  method private void getScores()
    declare DTFileRecords gr05File!
    declare BBjVector     gr05Recs!
    declare DTJsonObject  year!
    declare DTJsonObject  round!
    declare BBjVector     keys!
    gr05File! = new DTFileRecords("XXGR05")
    gr05File!.setKeyPre(0, #gr04$(1, 7))
    gr05Recs! = gr05File!.getAllRecords()
    #gr05Template$ = gr05File!.getTemplate()
    if gr05Recs!.size() = 0 then methodret
    dim gr05$:#gr05Template$
    for i = 0 to gr05Recs!.size() - 1
      gr05$ = gr05Recs!.get(i).toString()
      if gr05.score = 0 or gr05.putts = 0 then continue
      if #recent!.size() < 24 then
        round! = new DTJsonObject()
        round!.put("score",    gr05.score)
        round!.put("putts",    gr05.putts)
        round!.put("handicap", gr05.hc)
        #recent!.put(str(dec(gr05.date$)), round!)
        recRounds   = recRounds   + 1
        recScore    = recScore    + gr05.score
        recPutts    = recPutts    + gr05.putts
        recHandicap = recHandicap + gr05.hc
      fi
      year$ = date(gr05.date:"%Yl")
      if #years!.containsKey(year$) then
        year! = cast(DTJsonObject, #years!.get(year$))
      else
        if #years!.size() = 24 then break
        year! = new DTJsonObject()
      fi
      rounds      = year!.getInt("rounds")      + 1
      totScore    = year!.getInt("totScore")    + gr05.score
      totPutts    = year!.getInt("totPutts")    + gr05.putts
      totHandicap = year!.getInt("totHandicap") + gr05.hc
      year!.put("rounds",      rounds)
      year!.put("totScore",    totScore)
      year!.put("totPutts",    totPutts)
      year!.put("totHandicap", totHandicap)
      #years!.put(year$, year!)
    next i
    if recRounds then
      round! = new DTJsonObject()
      round!.put("score",    round(recScore    / recRounds, 1))
      round!.put("putts",    round(recPutts    / recRounds, 1))
      round!.put("handicap", round(recHandicap / recRounds, 1))
      #recent!.put(" avg", round!)
    fi
    totRounds   = 0
    totScore    = 0
    totPutts    = 0
    totHandicap = 0
    keys! = DT.getMapKeys(#years!)
    for i = 0 to keys!.size() - 1
      year! = cast(DTJsonObject, #years!.get(keys!.get(i).toString()))
      rounds   = year!.getNumber("rounds")
      score    = year!.getNumber("totScore")
      putts    = year!.getNumber("totPutts")
      handicap = year!.getNumber("totHandicap")
      year!.put("score",       round(score    / rounds, 1))
      year!.put("putts",       round(putts    / rounds, 1))
      year!.put("handicap",    round(handicap / rounds, 1))
      totRounds   = totRounds   + rounds
      totScore    = totScore    + score
      totPutts    = totPutts    + putts
      totHandicap = totHandicap + handicap
    next i
    year! = new DTJsonObject()
    year!.put("score",       round(totScore    / totRounds, 1))
    year!.put("putts",       round(totPutts    / totRounds, 1))
    year!.put("handicap",    round(totHandicap / totRounds, 1))
    #years!.put(" avg", year!)
  methodend
  
  method public BBjVector getCharts()
    declare DTChart      chart!
    declare BBjVector    charts!
    declare DTJsonObject year!
    declare DTJsonObject round!
    declare DTJsonObject avg!
    declare DTJsonArray  x!
    declare DTJsonArray  score!
    declare DTJsonArray  putts!
    declare DTJsonArray  handicap!
    declare DTJsonArray  average!
    declare BBjVector    keys!
    charts! = new BBjVector()
    if #recent!.size() = 0 then methodret charts!
    charts!.add(#buildOneChart(#years!, "score"))
    charts!.add(#buildOneChart(#recent!, "score"))
    charts!.add(#buildOneChart(#years!, "putts"))
    charts!.add(#buildOneChart(#recent!, "putts"))
    charts!.add(#buildOneChart(#years!, "handicap"))
    charts!.add(#buildOneChart(#recent!, "handicap"))
    methodret charts!
  methodend

  method private DTChart buildOneChart(TreeMap dataPoints!, BBjString fieldName$)
    declare DTChart      chart!
    declare DTJsonObject data!
    declare DTJsonObject avg!
    declare DTJsonArray  x!
    declare DTJsonArray  y!
    declare DTJsonArray  average!
    declare BBjVector    keys!
    keys! = DT.getMapKeys(dataPoints!)
    if len(keys!.get(1).toString()) = 4 then
      xLabel$ = "Year"
    else
      xLabel$ = "Date"
    fi
    x! = new DTJsonArray()
    x!.put(xLabel$)
    y! = new DTJsonArray()
    legend$ = cvs(fieldName$(1,1), 4) + fieldName$(2) 
    y!.put(legend$)
    if legend$ = "Score" then legend$ = "Scores"
    legend$ = iff(xLabel$ = "Year", "Historical", "Latest") + " " + legend$
    average! = new DTJsonArray()

    for i = 0 to keys!.size() - 1
      key$ = keys!.get(i).toString()
      if key$ = " avg" then
        avg! = cast(DTJsonObject, dataPoints!.get(key$))
        average!.put("Average " + str(avg!.getNumber(fieldName$)))
      else
        if xLabel$ = "Year" then
          x!.put(key$)
        else
          x!.put(date(num(key$):"%Mz/%Dz/%Yz"))
        fi
        data! = cast(DTJsonObject, dataPoints!.get(key$))
        y!.put(data!.getNumber(fieldName$))
        average!.put(avg!.getNumber(fieldName$))
      fi
    next i
    chart! = new DTChart("line")
    chart!.setLegendPosition("top")
    chart!.setX(x!)
    chart!.addY(y!)
    chart!.addY(average!)
    chart!.setTitle(legend$)
    methodret chart!
  methodend
  
  method public void getHtml()
    declare BBjVector charts!
    charts! = #getCharts()
    pageHeading$ = ""
    url$ = DT.htmlToUrl(new DTChart().getHtml(pageHeading$, charts!))
    call "CDS188", err=*next, y$, cmd$, url$, "B", "Golf Charts"
  methodend

  method public BBjString getErrMsg()
    methodret #msg$
  methodend
  
  method public TreeMap getYears()
    methodret #years!
  methodend
  
  method public TreeMap getRecent()
    methodret #recent!
  methodend
classend

begin
?'cs',
declare Charts charts!
charts! = new Charts("SAW", "KRAL")
charts!.getHtml()
run "CDS001"